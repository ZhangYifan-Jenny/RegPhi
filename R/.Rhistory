loadA<-summary(m0, what = 'qlambda',detail=T) #summarize significant loadings in pattern/Q-matrix format
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
loadA<-switch$F2 #not switch phi, because the sysmetrix design
sqrt(mean((mla[mla!=0 ]-loadA[mla!=0 ])^2))
10
########## BIG CFA
K=10;J=80;N=1000;lac=0;cpf=0
mla=0.7;PHI<-0.3; LD<-F;estLD=F;cati=NULL;noc=NULL
if (LD==T){ecr<-.2;necw<-2;necb<-2} else {ecr<-0;necw<-0;necb<-0}
Q<-matrix(-1,J,K)
out <- sim_lvm(N=N,lam=mla,J=J,K=K,lac = lac,cpf=cpf,phi=PHI,rseed=123,ecr=ecr,necw=necw,necb=necb)
y<-out$dat
m0 <- pcfa(dat = y, Q = Q, LD =F,burn =2000, iter = 2000,sign_check = T,verbose = T,alas=T)
m1 <- pcfa_regphi(dat = y, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=F)
summary(m1, what = 'phi',detail=F)
summary(m0, what = 'phi',detail=F)
summary(m0, what = 'qlambda',detail=F)
loadA<-summary(m0, what = 'qlambda',detail=T) #summarize significant loadings in pattern/Q-matrix format
mla<-out[["qlam"]]
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
View(out)
mla<-out[["lam"]]
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
loadA<-switch$F2 #not switch phi, because the sysmetrix design
sqrt(mean((mla[mla!=0 ]-loadA[mla!=0 ])^2))
loadA<-summary(m1, what = 'qlambda',detail=T) #summarize significant loadings in pattern/Q-matrix format
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
loadA<-switch$F2 #not switch phi, because the sysmetrix design
sqrt(mean((mla[mla!=0 ]-loadA[mla!=0 ])^2))
phi<-summary(m0, what = 'phi',detail=F) #summarize significant LD terms
var<-matrix(0,K,K)
for(i in 1:nrow(phi)){
var[phi[i,1],phi[i,2]]=phi[i,3]
}
sqrt(mean((var[var!=0 ]-0.3)^2))
phi<-summary(m1, what = 'phi',detail=F) #summarize significant LD terms
var<-matrix(0,K,K)
for(i in 1:nrow(phi)){
var[phi[i,1],phi[i,2]]=phi[i,3]
}
sqrt(mean((var[var!=0 ]-0.3)^2))
View(phi)
View(var)
View(var)
View(phi)
View(mla)
Q[mla!=0]=1
View(Q)
m0 <- pcfa(dat = y, Q = Q, LD =F,burn =2000, iter = 2000,sign_check = T,verbose = T,alas=T)
m1 <- pcfa_regphi(dat = y, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m0, what = 'qlambda',detail=F)
summary(m0, what = 'phi',detail=F)
summary(m1, what = 'qlambda',detail=F)
summary(m1, what = 'phi',detail=F)
loadA<-summary(m1, what = 'qlambda',detail=T) #summarize significant loadings in pattern/Q-matrix format
phi<-summary(m1, what = 'phi',detail=F) #summarize significant LD terms
var<-matrix(0,K,K)
for(i in 1:nrow(phi)){
var[phi[i,1],phi[i,2]]=phi[i,3]
}
sqrt(mean((var[var!=0 ]-0.3)^2))
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
loadA<-switch$F2 #not switch phi, because the sysmetrix design
sqrt(mean((mla[mla!=0 ]-loadA[mla!=0 ])^2))
loadA<-summary(m0, what = 'qlambda',detail=T) #summarize significant loadings in pattern/Q-matrix format
phi<-summary(m0, what = 'phi',detail=F) #summarize significant LD terms
var<-matrix(0,K,K)
for(i in 1:nrow(phi)){
var[phi[i,1],phi[i,2]]=phi[i,3]
}
sqrt(mean((var[var!=0 ]-0.3)^2))
switch<- fungible::faAlign(F1 = mla, F2 = loadA)
loadA<-switch$F2 #not switch phi, because the sysmetrix design
sqrt(mean((mla[mla!=0 ]-loadA[mla!=0 ])^2))
View(phi)
phi<-summary(m1, what = 'phi',detail=F) #summarize significant LD terms
rm(list=ls())
setwd("C:/Users/zhangyf/Downloads/LAWBL/R")
source("sim_lvm.R")
#source("pefa.R", local = TRUE)
source("utils.R")
source("Init.R")
source("Omega_Phi.R")
source("Gibbs_PSX.R")
source("GwMH_LA_MYE.R", local = TRUE)
source("GwMH_LA_MYC.R", local = TRUE)
source("pcfa_regphi.R")
library(MASS)
library(coda)
library(stats)
library(LAWBL)
out<-sim18cfa1
y <- sim18cfa0$dat
J <- ncol(y)
K <- 3
Q<-matrix(-1,J,K);
Q[1:6,1]<-Q[7:12,2]<-Q[13:18,3]<-1
m1 <- pcfa_regphi(dat = y, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
m0 <- pcfa(dat = y, Q = Q, LD =F,burn =2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m0, what = 'qlambda',detail=T)
Q[1,1]<-Q[7,2]<-Q[13,3]<-1
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
View(Q)
Q[1,1]<-Q[7,2]<-Q[13,3]<-1.0001
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
View(Q)
Q[1,1]<-Q[7,2]<-Q[13,3]<-3
m0 <- pcfa(dat = y, Q = Q, LD =F,burn =2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m0, what = 'qlambda',detail=T)
#source("pefa.R", local = TRUE)
source("utils.R")
source("Init.R")
Q[1,1]<-Q[7,2]<-Q[13,3]<-999
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
View(Q)
write.table(y, file='testdata.dat', sep=" ", row.names=FALSE, col.names=FALSE)
getwd()
View(Q)
View(Q)
View(Q)
K=3;J=18;N=1000;lac=0;cpf=0
mla=0.7;PHI<-0.3; LD<-F;estLD=F;cati=NULL;noc=NULL
if (LD==T){ecr<-.2;necw<-2;necb<-2} else {ecr<-0;necw<-0;necb<-0}
out <- sim_lvm(N=N,lam=mla,J=J,K=K,lac = lac,cpf=cpf,phi=PHI,rseed=123,ecr=ecr,necw=necw,necb=necb)
y<-out$dat
write.table(y, file='testdata.dat', sep=" ", row.names=FALSE, col.names=FALSE)
View(Q)
setwd("C:/Users/zhangyf/Downloads/LAWBL/R")
source("sim_lvm.R")
#source("pefa.R", local = TRUE)
source("utils.R")
source("Init.R")
source("Omega_Phi.R")
source("Gibbs_PSX.R")
source("GwMH_LA_MYE.R", local = TRUE)
source("GwMH_LA_MYC.R", local = TRUE)
source("pcfa_regphi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
View(m1)
la<-m1[["LA"]]
View(la)
source("Omega_Phi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = T,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
set.seed(123)
# Generate a random vector
random_vector <- rnorm(3)
# Create a positive definite matrix using the outer product
positive_definite_matrix <- random_vector %*% t(random_vector)
# Alternatively, you can make a symmetric matrix and ensure it's positive definite
# For example, by adding a diagonal matrix to ensure positive eigenvalues
symmetric_matrix <- matrix(rnorm(9), nrow = 3)
positive_definite_matrix <- symmetric_matrix + t(symmetric_matrix) + diag(3)
# Check if the matrix is positive definite
is_positive_definite <- all(eigen(positive_definite_matrix)$values > 0)
View(positive_definite_matrix)
positive_definite_matrix
inv.cov<-positive_definite_matrix
cov <- chol2inv(chol(inv.cov))
inv.cov<-matrix(c(1,2,4,3,2,1,3,5,2),3,3)
cov <- chol2inv(chol(inv.cov))
inv.cov<-matrix(c(1,2,4,3,1,1,3,5,1),3,3)
cov <- chol2inv(chol(inv.cov))
random_matrix <- matrix(rnorm(9), nrow = 3)
# Create a positive definite matrix by multiplying it by its transpose
inv.cov <- random_matrix %*% t(random_matrix)
cov <- chol2inv(chol(inv.cov))
inv.cov
cov
View(Q)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
Q<-matrix(0,J,K);
Q[1:6,1]<-Q[7:12,2]<-Q[13:18,3]<-1
Q[1,1]<-Q[7,2]<-Q[13,3]<-999
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
write.table(y, file='testdata.dat', sep=" ", row.names=FALSE, col.names=FALSE)
View(y)
View(m1)
LA<_m1[["LA"]]
LA<-m1[["LA"]]
View(LA)
# Load the lavaan package
library(lavaan)
View(y)
# Specify the CFA model
cfa_model <- '
# Measurement model
f1 =~ 1*y1 + a2*y2 + a3*y3 + a4*y4 + a5*y5 + a6*y6
f2 =~ 1*y7 + b2*y8 + b3*y9 + b4*y10 + b5*y11 + b6*y12
f3 =~ 1*y13 + c2*y14 + c3*y15 + c4*y16 + c5*y17 + c6*y18
'
# Fit the CFA model
fit <- cfa(cfa_model, data = your_data_frame)
# Fit the CFA model
fit <- cfa(cfa_model, data = y)
# Summary of the results
summary(fit, fit.measures = TRUE, standardized = TRUE)
source("pcfa_regphi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
# Summary of the results
summary(fit, fit.measures = TRUE, standardized = TRUE)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
source("pcfa_regphi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
# Summary of the results
summary(fit, fit.measures = TRUE, standardized = TRUE)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
log(1 - 1.5)
source("pcfa_regphi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
length(3- 1)
runif(K - 1)
#adj[1:3,1:3]=T
v0 = 0.02^2;
h = 50^2;
v1 = h * v0;
pii <- 2/ (K- 1)  #3
V0 <- matrix(v0, nrow = K, ncol = K)
V1 <- matrix(v1, nrow = K, ncol = K)
ind_nod <- array(0, dim = c(K - 1, K))
for (k in 1:K) {
if (k == 1) {
tmp <- 2:K
} else if (k == K) {
tmp <- 1:(K - 1)
} else tmp <- c(1:(k - 1), (k + 1):K)
ind_nod[, k] <- tmp
}  # end of k
ind_nod_phi <- ind_nod
View(ind_nod_phi)
i=1
ind_noi <- ind_nod_phi[, i]
# Extracting v0 and v1
v0 <- V0[ind_noi, i]
v1 <- V1[ind_noi, i]
w1 <- -0.5 * log(v0) - 0.5 * beta^2 / v0 + log(1 - pii)
beta<-c(0.22,0.343)
w1 <- -0.5 * log(v0) - 0.5 * beta^2 / v0 + log(1 - pii)
w2 <- -0.5 * log(v1) - 0.5 * beta^2 / v1 + log(pii)
log(1 - pii)
pii <- 2/ (K- 1)
pii <- 1/ (3- 1)
w1 <- -0.5 * log(v0) - 0.5 * beta^2 / v0 + log(1 - pii)
w_max <- apply(cbind(w1, w2), 1, max)
1/(1+exp(w1-w2))
1/(1+exp(w2-w1))
w <- exp(w2 - w_max) / rowSums(exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)))
runif(length(K - 1))
matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)
cbind(w1, w2)
cbind(w1, w2)
exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)))
exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE))
exp(0)
pmax(w1, w2)
w_max <- pmax(w1, w2) #apply(cbind(w1, w2), 1, max)
matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)
w <- exp(w2 - w_max) / rowSums(exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)))
w1[1]<-0.02
w_max <- pmax(w1, w2) #apply(cbind(w1, w2), 1, max)
apply(cbind(w1, w2), 1, max)
exp(w2 - w_max)
rowSums(exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)))
cbind(w1, w2)
cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)))
cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE)
exp(cbind(w1, w2) - matrix(rep(w_max, 2), nrow = length(w_max), byrow = TRUE))
exp(w2 - w_max)
z <- as.numeric(runif(K - 1) < w)
runif(K - 1)
source("Omega_Phi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
source("Omega_Phi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
source("Omega_Phi.R")
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
source("Omega_Phi.R")
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
library(lavaan)
# Set parameters
K <- 3  # Number of factors
J <- 18 # Number of observed variables
# Define true factor loadings
# Fix loadings for one item in each factor
loadings <- matrix(0, nrow = J, ncol = K)
loadings[1, 1] <- 1  # Fix loading for first factor
loadings[7, 2] <- 1  # Fix loading for second factor
loadings[13, 3] <- 1 # Fix loading for third factor
# Set other loadings (for illustration, you can adjust these)
loadings[2:6, 1] <- 0.7  # Loadings for first factor
loadings[8:12, 2] <- 0.7 # Loadings for second factor
loadings[14:18, 3] <- 0.7 # Loadings for third factor
# Define variances for factors and residuals
factor_variance <- 1  # Variance of the latent factors
residual_variance <- 0.5  # Residual variance for observed variables
# Generate the covariance matrix for the observed variables
cov_matrix <- loadings %*% t(loadings) * factor_variance + diag(residual_variance, J)
# Set seed for reproducibility
set.seed(123)
# Simulate data
n <- 1000  # Number of observations
data <- MASS::mvrnorm(n, mu = rep(0, J), Sigma = cov_matrix)
# Convert to data frame
data <- as.data.frame(data)
# Fit CFA model
model <- '
# Measurement model
f1 =~ NA*V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9 + V10 + V11 + V12 + V13 + V14 + V15 + V16 + V17 + V18
f2 =~ NA*V7 + V8 + V9 + V10 + V11 + V12 + V13 + V14 + V15 + V16 + V17 + V18
f3 =~ NA*V13 + V14 + V15 + V16 + V17 + V18
# Constraints
f1 =~ 1*V1
f2 =~ 1*V7
f3 =~ 1*V13
'
fit <- cfa(model, data = data)
# Print summary of the fit
summary(fit, fit.measures = TRUE)
m1 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
# Print summary of the fit
summary(fit, fit.measures = TRUE)
m1 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
View(loadings)
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3
f2 =~ x4 + 0.5*x5 + 1.5*x6
f3 =~ x7 + 0.1*x8 + 0.9*x9
f3 ~ 0.5*f1 + 0.6*f2
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=100L)
# population moments
fitted(sem(population.model))
# sample moments
round(cov(myData), 3)
round(colMeans(myData), 3)
# fit model
myModel <- ' f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f3 ~ f1 + f2 '
fit <- sem(myModel, data=myData)
summary(fit)
myData <- simulateData(population.model, sample.nobs=1000L)
# population moments
fitted(sem(population.model))
# sample moments
round(cov(myData), 3)
round(colMeans(myData), 3)
# fit model
myModel <- ' f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f3 ~ f1 + f2 '
fit <- sem(myModel, data=myData)
summary(fit)
y<-myData
y<-as.data.frame(y)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
Q<-matrix(-1,9,3)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'qlambda',detail=F)
Q[1,1]<-Q[4,2]<-Q[7,3]<-999
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=F)
summary(m1, what = 'phi',detail=F)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m1, what = 'qlambda',detail=F)
summary(m1, what = 'phi',detail=F)
summary(fit)
summary(m1, what = 'qlambda',detail=F)
summary(m1, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'phi',detail=F)
summary(m2, what = 'qlambda',detail=F)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=F)
summary(m2, what = 'phi',detail=F)
summary(m1, what = 'qlambda',detail=T)
m0 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m0, what = 'phi',detail=F)
summary(m0, what = 'qlambda',detail=T)
Q<-matrix(0,J,K);
Q[1:3,1]<-Q[4:6,2]<-Q[7:9,3]<-1
Q[1,1]<-Q[4,2]<-Q[7,3]<-999
m0 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
Q<-matrix(0,9,3);
Q[1:3,1]<-Q[4:6,2]<-Q[7:9,3]<-1
Q[1,1]<-Q[4,2]<-Q[7,3]<-999
m0 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m0, what = 'qlambda',detail=T)
summary(m0, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
population.model <- ' f1 =~ x1 + 0.7*x2 + 0.7*x3 + 0.7*x4 + 0.7*x5 + 0.7*x6
f2 =~ x7 + 0.7*x8 + 0.7*x9 + 0.7*x10 + 0.7*x11 + 0.7*x12
f3 =~ x13 + 0.7*x14 + 0.7*x15 + 0.7*x16 + 0.7*x17 + 0.7*x18
f1 ~ 0.3*f2
f3 ~ 0.3*f1 + 0.3*f2
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=1000L)
y <- simulateData(population.model, sample.nobs=1000L)
m2 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
#### test reg phi
rm(list=ls())
setwd("C:/Users/zhangyf/Downloads/LAWBL/R")
source("sim_lvm.R")
source("utils.R")
source("Init.R")
source("Omega_Phi.R")
source("Gibbs_PSX.R")
source("GwMH_LA_MYE.R", local = TRUE)
source("GwMH_LA_MYC.R", local = TRUE)
source("pcfa_regphi.R")
library(MASS)
library(coda)
library(stats)
library(LAWBL)
################ Non-standardized
library(lavaan)
population.model <- ' f1 =~ x1 + 0.7*x2 + 0.7*x3 + 0.7*x4 + 0.7*x5 + 0.7*x6
f2 =~ x7 + 0.7*x8 + 0.7*x9 + 0.7*x10 + 0.7*x11 + 0.7*x12
f3 =~ x13 + 0.7*x14 + 0.7*x15 + 0.7*x16 + 0.7*x17 + 0.7*x18
f1 ~ 0.3*f2
f3 ~ 0.3*f1 + 0.3*f2
'
set.seed(1234)
y <- simulateData(population.model, sample.nobs=1000L)
K=3;J=18;
Q<-matrix(0,J,K)
Q[1:6,1]<-Q[7:12,2]<-Q[13:18,3]<-1
Q[1,1]<-Q[7,2]<-Q[13,3]<-999  ##fix loading to 1
View(Q)
m0 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
m1 <- pcfa_regphi(dat = y,std=F, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m0, what = 'qlambda',detail=T)
summary(m0, what = 'phi',detail=F)
summary(m1, what = 'qlambda',detail=T)
summary(m1, what = 'phi',detail=F)
# fit model
myModel <- ' f1 =~ x1 + x2 + x3+x4 + x5 + x6
f2 =~ x7 + x8 + x9+x10 + x11 + x12
f3 =~ x13 + x14 + x15+x16 + x17 + x18
f2 ~ f1
f3 ~ f1 + f2 '
fit <- sem(myModel, data=y)
summary(fit)
write.table(y, file='testdata.dat', sep=" ", row.names=FALSE, col.names=FALSE)
################ Standardized
y <- sim18cfa0$dat
################ Standardized
y <- sim18cfa0$dat
Q<-matrix(-1,J,K)
Q[1:6,1]<-Q[7:12,2]<-Q[13:18,3]<-1
m2 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
View(Q)
m2 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = NULL,regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'lasso',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
m2 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'horse',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
source("pcfa_regphi.R")
source("pcfa_regphi.R")
m2 <- pcfa_regphi(dat = y,std=T, Q = Q,regphi = 'ssp',regpsx = NULL, LD = F,burn = 2000, iter = 2000,sign_check = F,verbose = T,alas=T)
summary(m2, what = 'qlambda',detail=T)
summary(m2, what = 'phi',detail=F)
